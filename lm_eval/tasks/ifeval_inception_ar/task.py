import re
from typing import List, Union
import json
import numpy as np
import logging

from lm_eval.api.instance import Instance
from lm_eval.api.task import ConfigurableTask
# from lm_eval.tasks.ifeval_syn_ar.gemini_client import gemini_generate
from lm_eval.tasks.ifeval import instructions_registry
from lm_eval.tasks.ifeval.utils import test_instruction_following_strict, test_instruction_following_loose, InputExample, OutputExample


class IFevalInceptionArTask(ConfigurableTask):
    VERSION = 0 
    DATASET_PATH = "/mnt/local/shared/abhishekm/datasets/aragen-ifeval"
    DATASET_NAME = "default" 
    data_files = {"validation": "ar_jais_plus_8b_dpo.jsonl"}

    def __init__(self, **kwargs):
        super().__init__(config={"metadata": {"version": self.VERSION}, "dataset_kwargs": {"data_files": self.data_files}})

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return False

    def validation_docs(self):
        return self.dataset["validation"]

    def doc_to_text(self, doc):
        return doc["prompt"]

    def doc_to_target(self, doc):
        return None


    def construct_requests(
        self, doc, ctx, chat_template=None, apply_chat_template=False, **kwargs
    ):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """

        return [
            Instance(
                request_type="generate_until",
                doc=doc,
                arguments=(ctx, {"until": [], "do_sample": False, "temperature": 1.0, "max_gen_toks": 8000}),
                idx=0,
                **kwargs,
            )
        ]
    

    def process_results(self, doc, results):
        inp = InputExample(
            key=doc["idx"],
            instruction_id_list=doc["instruction_id_list"],
            prompt=doc["prompt"],
            kwargs={},
        )
        response = results[0]

        out_strict = test_instruction_following_strict(inp, response)
        out_loose = test_instruction_following_loose(inp, response)

        return {
            "prompt_level_strict_acc": out_strict.follow_all_instructions,
            "inst_level_strict_acc": out_strict.follow_instruction_list,
            "prompt_level_loose_acc": out_loose.follow_all_instructions,
            "inst_level_loose_acc": out_loose.follow_instruction_list,
        }

    def agg_inst_level_acc(self, items):
        flat_items = [item for sublist in items for item in sublist]
        inst_level_acc = sum(flat_items) / len(flat_items)
        return inst_level_acc

        
    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {
        "prompt_level_strict_acc": np.mean,
        "inst_level_strict_acc": self.agg_inst_level_acc,
        "prompt_level_loose_acc": np.mean,
        "inst_level_loose_acc": self.agg_inst_level_acc,
    }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {
        "prompt_level_strict_acc": True,
        "inst_level_strict_acc": True,
        "prompt_level_loose_acc": True,
        "inst_level_loose_acc": True,
    }
