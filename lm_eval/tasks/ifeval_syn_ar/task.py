import re
from typing import List, Union
import json
import numpy as np
import logging

from lm_eval.api.instance import Instance
from lm_eval.api.task import ConfigurableTask
# from lm_eval.tasks.ifeval_syn_ar.gemini_client import gemini_generate
from lm_eval.tasks.ifeval import instructions_registry
from lm_eval.tasks.ifeval.utils import test_instruction_following_strict, test_instruction_following_loose, InputExample, OutputExample


_SUFFIX_TO_PREFIX_MAPPING = {
    "existence": "keywords:",
    "frequency": "keywords:",
    "forbidden_words": "keywords:",
    "letter_frequency": "keywords:",  # As per your structure, this falls under _KEYWORD
    "response_language": "language:",
    "number_sentences": "length_constraints:",
    "number_paragraphs": "length_constraints:",
    "number_words": "length_constraints:",
    "nth_paragraph_first_word": "length_constraints:",
    "number_placeholders": "detectable_content:",
    "postscript": "detectable_content:",
    "number_bullet_lists": "detectable_format:",
    "constrained_response": "detectable_format:",
    "number_highlighted_sections": "detectable_format:",
    "multiple_sections": "detectable_format:",
    "json_format": "detectable_format:",
    "title": "detectable_format:",
    "two_responses": "combination:",
    "repeat_prompt": "combination:",
    "end_checker": "startend:",
    "capital_word_frequency": "change_case:",
    "english_capital": "change_case:",
    "english_lowercase": "change_case:",
    "no_comma": "punctuation:",
    "quotation": "startend:",
}
# /net/abhishekm2-dev/srv/nfs/abhishekm2-data/ws/datasets/synthetic_data_gemini_ifeval_arabic/ifeval/ifeval_gemini-2.0-flash-thinking-exp-01-21_functions_cleaned_reformatted_fixed.jsonl
class IFevalSynArTask(ConfigurableTask):
    VERSION = 0 
    DATASET_PATH = "/mnt/local/shared/abhishekm/datasets/if-eval-arabic-synthetic"
    DATASET_NAME = "default" 
    data_files = {"validation": "ifeval_gemini-2.0-flash-thinking-exp-01-21_functions_cleaned_reformatted_fixed.jsonl"}

    def __init__(self, **kwargs):
        super().__init__(config={"metadata": {"version": self.VERSION}, "dataset_kwargs": {"data_files": self.data_files}})

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return False

    def validation_docs(self):
        return self.dataset["validation"]

    def doc_to_text(self, doc):
        return doc["prompt"]

    def doc_to_target(self, doc):
        return None


    def construct_requests(
        self, doc, ctx, chat_template=None, apply_chat_template=False, **kwargs
    ):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """

        return [
            Instance(
                request_type="generate_until",
                doc=doc,
                arguments=(ctx, {"until": [], "do_sample": False, "temperature": 1.0, "max_gen_toks": 8192}),
                idx=0,
                **kwargs,
            )
        ]
    


    def process_results(self, doc, results):
        inp = InputExample(
            key=doc["key"],
            instruction_id_list=doc["instruction_id_list"],
            prompt=doc["prompt"],
            kwargs=doc["kwargs"],
        )
        response = results[0]

        # Initialize new lists for the output
        new_instruction_id_list = []
        new_kwargs_list = []

        # Iterate over the original instruction_id_list and kwargs
        for instruction_id, current_kwargs in zip(doc["instruction_id_list"], doc["kwargs"]):
            
            if instruction_id == 'keywords:frequency' and "keywords" in current_kwargs:
                # This is the instruction we want to transform and replace
                
                keywords_value = current_kwargs.get("keywords") # Use .get for safety

                if isinstance(keywords_value, list):
                    for keyword_item in keywords_value:
                        if isinstance(keyword_item, str): # Ensure keyword_item is a string
                            new_instruction_id_list.append("keywords:frequency") # Or "keywords:keyword_frequency" if you rename the instruction type
                            
                            # Create new kwargs dict, copy original, remove "keywords", add "keyword"
                            transformed_kwargs = current_kwargs.copy() # Shallow copy is usually fine here
                            del transformed_kwargs["keywords"] # Remove the plural "keywords"
                            transformed_kwargs["keyword"] = keyword_item # Add the singular "keyword"
                            new_kwargs_list.append(transformed_kwargs)
                        else:
                            print(f"Warning: Non-string item '{keyword_item}' found in 'keywords' list for instruction_id '{instruction_id}'. Skipping this keyword.")

                else:
                    new_instruction_id_list.append("keywords:frequency") # Or "keywords:keyword_frequency"
                    transformed_kwargs = current_kwargs.copy()
                    del transformed_kwargs["keywords"]
                    transformed_kwargs["keyword"] = str(keywords_value)
                    new_kwargs_list.append(transformed_kwargs)
                
            
            elif "relation" in current_kwargs and current_kwargs.get("relation") == "at most":
               new_instruction_id_list.append(instruction_id)
               transformed_kwargs = current_kwargs.copy()
               del transformed_kwargs["relation"]
               transformed_kwargs["relation"] = "less than"
               new_kwargs_list.append(transformed_kwargs)

            else:
                # This instruction_id is not 'keywords:frequency' with "keywords"
                # or doesn't meet the condition, so keep it as is.
                new_instruction_id_list.append(instruction_id)
                new_kwargs_list.append(current_kwargs)
                
        inp.instruction_id_list = new_instruction_id_list
        inp.kwargs = new_kwargs_list
        out_strict = test_instruction_following_strict(inp, response)
        out_loose = test_instruction_following_loose(inp, response)

        return {
            "prompt_level_strict_acc": out_strict.follow_all_instructions,
            "inst_level_strict_acc": out_strict.follow_instruction_list,
            "prompt_level_loose_acc": out_loose.follow_all_instructions,
            "inst_level_loose_acc": out_loose.follow_instruction_list,
        }

    def agg_inst_level_acc(self, items):
        flat_items = [item for sublist in items for item in sublist]
        inst_level_acc = sum(flat_items) / len(flat_items)
        return inst_level_acc

        
    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {
        "prompt_level_strict_acc": np.mean,
        "inst_level_strict_acc": self.agg_inst_level_acc,
        "prompt_level_loose_acc": np.mean,
        "inst_level_loose_acc": self.agg_inst_level_acc,
    }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {
        "prompt_level_strict_acc": True,
        "inst_level_strict_acc": True,
        "prompt_level_loose_acc": True,
        "inst_level_loose_acc": True,
    }



# def is_a_match(prediction: str, instruction: str):
#     prompt = F""" You are a very good grader for arabic text. Can you please grade if the following response is a match to the instruction?
#     Instruction: {instruction}
#     Response: {prediction}
#     Return Yes if the response is a match to the instruction, otherwise return No. No other text is allowed.
#     """
#     try:
#         response = gemini_generate(prompt)
#         return int(response.lower() == "yes")
#     except Exception as e:
#         logging.error(f"Error generating response: {e}")
#         return 0


